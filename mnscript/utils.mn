--
-- Copyright (c) 2021 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

class Utils {

    static fn serializeTable(t, p, c, s) {
        n = 0
        for i, v in next, t {
            n = n + 1
        }
        ti = 1
        e = n > 0
        str = ""
        _table = Utils.serializeTable

        c = c or {}
        p = p or 1
        s = s or string.rep

        local fn _format(v, is_table) {
            out = (type(v) == "string" and ('"'..v..'"')) or (type(v) == "number" and ('['..tostring(v)..']')) or tostring(v)
            return is_table and (c[v][2] >= p) and _table(v, p + 1, c, s) or (type(v) == "string" and ('"'..v..'"') or tostring(v))
        }

        c[t] = {t, 0}

        for i, v in next, t {
            typ_i, typ_v = type(i) == 'table', type(v) == 'table'
            c[i], c[v] = (not c[i] and typ_i) and {i, p} or c[i], (not c[v] and typ_v) and {v, p} or c[v]
            str = str .. s('  ', p) .. '[' .. _format(i, typ_i) .. '] = '  .. _format(v, typ_v) .. (ti < n and ',' or '') .. '\n'
            ti = ti + 1
        }

        return ('{' .. (e and '\n' or '')) .. str .. (e and s('  ', p - 1) or '') .. '}'
    }

    static fn split(self, sep, max, regex) {
        assert(sep ~= "")
        assert(max == nil or max >= 1)
        record = {}
        if self:len() > 0 {
            plain = not regex
            max = max or -1
            field, start = 1, 1
            first, last = self:find(sep, start, plain)
            while first and max ~= 0 {
                record[field] = self:sub(start, first - 1)
                field = field + 1
                start = last + 1
                first, last = self:find(sep, start, plain)
                max = max - 1
            }
            record[field] = self:sub(start)
        } else {
            record[1] = ""
        }
        return record
    }

    static fn set(tbl) {
        s = {}
        for _, v in ipairs(tbl) {
            s[v] = true
        }
        return s
    }

    -- declare after set()
    blank_set = Utils.set({ " ", "\t", "\n", "\r" })    

    static fn trim(self) {
        i = 1
        j = self:len()
        blank_set = Utils.blank_set        
        while true {
            if blank_set[self:sub(i, i)] {
                i = i + 1
            } elseif blank_set[self:sub(j, j)] {
                j = j - 1
            } else {
                return self:sub(i, j)
            }
        }
        return self
    }

    static fn seqReduce(tbl, init, func) {
        for i, v in ipairs(tbl) {
            init = func(init, i, v)
        }
        return init
    }

    read_option = _VERSION == "Lua 5.1" and "*a" or "a"

    static fn readFile(file_path) {
        f = io.open(file_path, "rb")
        if not f {
            return
        }
        data = f:read(Utils.read_option)
        f:close()
        return data
    }

    static fn writeFile(file_path, content) {
        f = io.open(file_path, "wb")
        if not f {
            return
        }
        f:write(content)
        f:close()
        return true
    }

    static fn debug(str) {
        io.write(str .. "\n")
    }

    static fn dump(t) {
        Utils.debug(Utils.serializeTable(t))
    }

    -- position line in content
    static fn posLine(content, lpos, cpos) {
        assert(type(content) == "string", "Invalid content")
        assert(type(lpos) == "number", "Invalid pos")    
        ln_num = 1
        for _ in content:sub(1, lpos):gmatch("\n") {
            ln_num = ln_num + 1
        }
        num = ln_num
        ln_content = ""
        for line in content:gmatch("([^\n]*)\n?") {
            if num == 1 {
                ln_content = line
                break
            }
            num = num - 1
        }
        return {line : ln_num, message : ln_content}
    }
}

return Utils