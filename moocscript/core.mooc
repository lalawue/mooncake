--
-- Copyright (c) 2021 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import LPeg from "lpeg"
import parse from "moocscript.parser" {}
import compile, clearproj from "moocscript.compile" {}
import split, posLine, readFile from "moocscript.utils" {}
import concat, insert, remove from table {}

unpack = unpack or table.unpack

-- source to AST
fn toAST(config, text) {
    t = type(text)
    if t ~= "string" {
        return nil, "expecting string (got " .. t .. ")"
    }
    config = config or {}
    ret, tbl = parse(text)
    if not ret {
        err = posLine(tbl.content, tbl.lpos, tbl.cpos)
        msg = string.format("parse error %s:%d: %s", config.fname, err.line, err.message)
        return nil, msg
    }
    return tbl
}

-- translate to Lua
fn toLua(config, tbl) {
    ret, code = compile(config, tbl)
    if not ret {
        return nil, code
    }
    return code
}

-- directory separator
dir_spliter = package.config and package.config[1] or '/'
tmp_config = {}

-- register loader
fn mcLoader(name) {
    name_path = name:gsub("%.", dir_spliter)
    text, file_path = nil, nil
    for path in package.path:gmatch("[^;]+") {
        len = path:len()
        path = path:sub(1, len - 4) .. ".mooc"
        file_path = path:gsub("?", name_path)
        text = readFile(file_path)
        if text {
            break
        }
    }
    guard text else {
        return nil, "Could not find .mooc file"
    }
    tmp_config.fname = file_path
    res, emsg = toAST(tmp_config, text)
    if not res {
        error(emsg)
    }
    res, emsg = toLua(tmp_config, res)
    if not res {
        error(emsg)
    }
    f, err = load(res, file_path)
    return f
}

fn mcLoadString(text, cname, mode, env) {
    tmp_config.fname = cname
    res, emsg = toAST(tmp_config, text)
    if not res {
        return emsg
    }
    res, emsg = toLua(tmp_config, res)
    if not res {
        return emsg
    }
    f = (loadstring or load)
    return f(res, cname, unpack({ mode : mode, env : env }))
}

fn mcLoadFile(fname, ...) {
    text, err = readFile(fname)
    guard text else {
      return nil, err
    }
    return mcLoadString(text, fname, ...)
}

fn mcDoFile(...) {
    f = assert(mcLoadFile(...))
    return f()
}

fn mcRemoveLoader() {
    guard package.mooc_loaded else {
        return
    }
    loaders = package.loaders or package.searchers
    for i=#loaders, 1, -1 {
        if package.mooc_loaded == loaders[i] {
            remove(loaders, i)
            package.mooc_loaded = nil
            return true
        }
    }
}

fn mcAppendLoader() {
    if package.mooc_loaded {
        return
    }
    loaders = package.loaders or package.searchers
    insert(loaders, mcLoader)
    package.mooc_loaded = mcLoader
}

fn mcVersion() {
    lver = jit and jit.version or _VERSION
    pver = type(LPeg.version) == "function" and ("LPeg " .. LPeg.version()) or LPeg.version
    return "moocscript v0.4.20210901, " .. lver .. ", " .. pver
}

fn mcLoaded() {
    return package.mooc_loaded ~= nil
}

-- append loader
mcAppendLoader()

return {
    loadstring : mcLoadString,
    loadfile : mcLoadFile,
    dofile : mcDoFile,
    removeloader : mcRemoveLoader,
    appendloader : mcAppendLoader,
    toAST : toAST,
    toLua : toLua,
    clearProj : clearproj,
    version : mcVersion,
    loaded : mcLoaded
}
