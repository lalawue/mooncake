--
-- Copyright (c) 2021 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import Utils from "moocscript.utils"

local assert = assert
local type = type
local srep = string.rep
local ipairs = ipairs
local mathmax = math.max

class Out {

    _indent = 0
    _changeLine = false
    _output = {}
    _inline = 0

    fn reset() {
        self._indent = 0 -- indent char
        self._changeLine = false -- force change line
        self._output = {} -- output table
        self._inline = 0 -- force expr oneline
    }

    fn incIndent() {
        self._indent = self._indent + 1
    }

    fn decIndent() {
        self._indent = self._indent - 1
    }

    fn changeLine() {
        self._changeLine = true
    }

    fn pushInline() {
        self._inline = self._inline + 1
    }

    fn popInline() {
        self._inline = self._inline - 1
    }

    fn append(str, same_line) {
        assert(type(str) == "string", "Invalid input")
        t = self._output
        same_line = same_line or (self._inline > 0)
        if same_line and not self._changeLine {
            i = mathmax(#t, 1)
            t[i] = (t[i] or "") .. str
        } else {
            self._changeLine = false
            t[#t + 1] = (self._indent > 0 and srep("\t", self._indent) or "") .. str
        }
    }
}

_global_names = Utils.set({
    "_G",
    "_VERSION",
    "_ENV",
    "assert",
    "collectgarbage",
    "coroutine",
    "debug",
    "dofile",
    "error",
    "getfenv",
    "getmetatable",
    "io",
    "ipairs",
    "jit",
    "load",
    "loadfile",
    "loadstring",
    "math",
    "module",
    "next",
    "os",
    "package",
    "pairs",
    "pcall",
    "print",
    "rawequal",
    "rawget",
    "rawlen",
    "rawset",
    "require",
    "select",
    "setfenv",
    "setmetatable",
    "string",
    "table",
    "tonumber",
    "tostring",
    "type",
    "unpack",
    "xpcall",
    "nil",
    "true",
    "false",
})

_scope_global = { otype = "gl", vars = _global_names }
_scope_proj = { otype = "pj", vars = {} }

class Ctx {

    config = false
    ast = false
    content = false

    scopes = false
    err_info = false
    last_pos = 0

    fn reset(config, ast, content) {
        self.config = config
        self.ast = ast
        self.content = content
        -- { otype = "gl|pj|fi|cl|fn|lo|if|do|gu", vars = {} }
        self.scopes = {
            index = 3,
            _scope_global,
            _scope_proj,
            { otype = "fi", vars = config.fi_scope or {} }
        }
        self.err_info = false
        self.last_pos = 0
    }

    fn pushScope(ot, exp) {
        t = self.scopes
        t.index += 1
        tn = t[t.index] or {}
        tn.otype = ot
        tn.vars = {}
        tn.exp = exp
        t[t.index] = tn
    }

    fn popScope() {
        t = self.scopes
        t.index -= 1
    }

    fn globalInsert(n) {
        t = self.scopes
        t[2].vars[n] = true
    }

    fn localInsert(n) {
        t = self.scopes
        t[t.index].vars[n] = true
    }

    -- check var was defined
    fn checkName(e, only_check) {
        if e and e.etype == 'exp' {
            e = e[1]
        }
        if e and e.etype == 'var' {
            n = e.value
            t = self.scopes
            for i = t.index, 1, -1 {
                if t[i].vars[n] or t[i].vars["*"] {
                    return true
                }
            }
            if not only_check {
                self:errorPos("undefined variable", e.pos - 1)
            }
        }
    }

    fn errorPos(err_msg, pos) {
        if self.err_info {
            return
        }
        pos = pos or mathmax(0, self.last_pos - 1)
        self.err_info = { =err_msg, =pos }
        error('')
    }

    fn updatePos(pos) {
        if type(pos) == "number" and not self.err_info {
            self.last_pos = pos
        }
    }
}

--[[
]]

-- class and instance metamethod except __call
_cls_metafns = Utils.set({"__tostring",
                                "__index", -- only for class
                                "__newindex", -- only for class
                                "__call", -- only for instance
                                "__add",
                                "__band",
                                "__bnot",
                                "__bor",
                                "__bxor",
                                "__close",
                                "__concat",
                                "__div",
                                "__eq",
                                "__idiv",
                                "__le",
                                "__len",
                                "__pairs",
                                "__ipairs",
                                "__lt",
                                "__metatable",
                                "__mod",
                                "__mode",
                                "__mul",
                                "__name",
                                "__pow",
                                "__shl",
                                "__shr",
                                "__sub",
                                "__unm"})

_map_binop = { ['!='] = '~=' }

class M {

    ctx = false
    out = false
    exfn = {}
    stfn = {}

    fn reset(ctx, out) {
        self.ctx = ctx
        self.out = out
    }

    fn trExpr(t) {
        assert(type(t) == "table", "Invalid expr type")
        ctx = self.ctx
        out = self.out
        etype = t.etype
        if etype == "exp" {
            for _, v in ipairs(t) {
                self:trExpr(v)
            }
            return
        }
        func = self.exfn[etype]
        if func {
            func(self, t)
            return
        }
        switch etype {
        case "var":
            func = { _, t in
                ctx:checkName(t)
                out:append(t.value, true)
            }
        case "const":
            func = { _, t in
                out:append(t.value, true)
            }
        case "{":
            func = self.trEtTblDef
        case "fn":
            func = self.trEtFnOnly
        case "(":
            func = self.trEtPara
        case ".":
            func = { _, t in
                out:append("." .. t[1].value, true)
            }
        case ":":
            func = self.trEtColon
        case "[":
            func = self.trEtSquare
        case 'unop':
            func = { _, t in
                v = t.value == 'not' and 'not ' or t.value
                out:append(v, true)
            }
        case 'binop':
            func = { _, t in
                out:append(' ' .. (_map_binop[t.value] or t.value) .. ' ', true)
            }
        default:
            ctx:errorPos("Invalid expr etype near " .. (etype or "unknown"))
            return
        }
        self.exfn[etype] = func
        func(self, t)
    }

    fn trStatement(ast) {
        ctx = self.ctx
        out = self.out
        stfn = self.stfn
        index = 0
        while true {
            index += 1
            if index > #ast {
                break
            }
            t = ast[index]
            stype = t.stype
            func = stfn[stype]
            if t.pos {
                ctx:updatePos(t.pos)
            }
            if func {
                func(self, t)
            } else {
                switch stype {
                case "import":
                    func = self.trStImport
                case "fn":
                    func = self.trStFnDef
                case "(":
                    func = self.trStCall
                case "class":
                    func = self.trStClass
                case "struct":
                    func = self.trStStruct
                case "extension":
                    func = self.trStExtension
                case "ex":
                    func = self.trStExport
                case "=":
                    func = self.trAssign
                case "return":
                    func = self.trStReturn
                case "defer":
                    func = self.trStDefer
                case "if":
                    func = self.trStIfElse
                case "switch":
                    func = self.trStSwitch
                case "guard":
                    func = self.trStGuard
                case "break":
                    func = self.trStBreak
                case "goto", "::":
                    func = self.trStGotoLabel
                case "for":
                    func = self.trStFor
                case "while":
                    func = self.trStWhile
                case "repeat":
                    func = self.trStRepeat
                case "do":
                    func = self.trStDo
                case "#!":
                    func = { self, t in
                        if self.ctx.config.shebang and t.value {
                            self.out:append(t.value)
                        }
                    }
                case ';':
                    func = { self, _ in
                        t = out._output
                        i = mathmax(#t, 1)
                        t[i] = (t[i] or "") .. ';'
                    }
                case 'raw':
                    func = { self, t in
                        self.out:append(t.value)
                    }
                default:
                    ctx:errorPos("Invalid stype near " .. (stype or "uknown stype"))
                    return
                }
                stfn[stype] = func
                func(self, t)
            }
            out:changeLine()
        }
    }

    -- MARK: Expr

    -- return name, 1st value
    fn trEtName(t) {
        ctx = self.ctx
        n = ''
        if t.etype == 'exp' and #t > 0 {
            name = ''
            for i, v in ipairs(t) {
                if i == 1 {
                    n = v.value
                    name = n
                } else {
                    name ..= v.etype .. v[1].value
                }
            }
            return name, n
        } elseif t.etype {
            return t.value, t.value
        }
    }

    fn trEtPara(t) {
        assert(t.etype == "(", "Invalid op (")
        out = self.out
        out:pushInline()
        out:append("(", true)
        for i, e in ipairs(t) {
            if i > 1 {
                out:append(", ", true)
            }
            self:trExpr(e)
        }
        out:append(")", true)
        out:popInline()
    }

    fn trEtColon(t) {
        assert(t.etype == ":", "Invalid op =")
        self.out:append(":", true)
        for i, e in ipairs(t) {
            self:trExpr(e)
        }
    }

    fn trEtSquare(t) {
        assert(t.etype == "[", "Invalid op [")
        out = self.out
        out:pushInline()
        out:append("[", true)
        for _, e in ipairs(t) {
            self:trExpr(e)
        }
        out:append("]", true)
        out:popInline()
    }

    fn trEtTblDef(t) {
        assert(t.etype == "{", "Invalid etype table def")
        ctx = self.ctx
        out = self.out
        out:append("{ ")
        for i, e in ipairs(t) {
            if e.nkey {
                value = e.nkey.value
                out:append(value, true)
                out:append(" = ", true)
                out:append(value, true)
            } else {
                if e.vkey {
                    out:append(e.vkey.value, true)
                    out:append(" = ", true)
                } elseif e.bkey {
                    out:append("[", true)
                    self:trExpr(e.bkey)
                    out:append("] = ", true)
                }
                self:trExpr(e.value)
            }
            if i < #t {
                out:append(", ")
            }
        }
        out:append(" }")
    }

    fn trEtFnOnly(t) {
        assert(t.etype == "fn", "Invalid etype fn def only")
        ctx = self.ctx
        out = self.out
        ctx:pushScope("fn", t)
        out:append("function(" .. Utils.seqReduce(t.args, "", { init, i, v in
            ctx:localInsert(v.value)
            return init .. (i > 1 and ", " or "") .. v.value
        }) .. ")")
        out:incIndent()
        if #t.body > 0 {
            if t.df {
                out:changeLine()
                out:append(t.df)
            }
            out:changeLine()
            self:trStatement(t.body)
        }
        out:decIndent()
        out:append("end")
        ctx:popScope()
    }

    -- MARK: Statement

    fn trStImport(t) {
        assert(t.stype == "import", "Invalid stype import")
        ctx = self.ctx
        out = self.out
        if #t <= 0 {
            out:append("require(" .. t.lib.value .. ")")
        } elseif #t == 1 {
            lt = t[1][1]
            if t.lib.etype == 'const' {
                out:append("local " .. lt.value .. " = require(" .. t.lib.value .. ")")
            } else {
                ctx:checkName(t.lib)
                out:append("local " .. lt.value .. " = " .. t.lib.value)
            }
            ctx:localInsert(lt.value)
        } else {
            lt = t[1]
            rt = t[2]
            if #rt <= 0 {
                rt = lt
            }
            out:append(Utils.seqReduce(lt, "local ", { init, i, v in
                ctx:localInsert(v.value)
                return init .. (i <= 1 and "" or ", ") .. v.value
            }))
            if t.lib.etype == 'const' {
                out:append("do")
                out:incIndent()
                out:append("local __l = require(" .. t.lib.value .. ")")
                out:append(Utils.seqReduce(lt, "", { init, i, v in
                    return init .. (i <= 1 and "" or ", ") .. v.value
                }))
                out:append(" = " .. Utils.seqReduce(rt, "", { init, i, v in
                    return init .. (i <= 1 and "__l." or ", __l.") .. v.value
                }), true)
                out:decIndent()
                out:append("end")
            } else {
                ctx:checkName(t.lib)
                tfirst, tnext = t.lib.value .. ".", ", " .. t.lib.value .. "."
                out:append(" = " .. Utils.seqReduce(rt, "", { init, i, v in
                    return init .. (i <= 1 and tfirst or tnext) .. v.value
                }), true)
            }
        }
    }

    fn trStExport(t) {
        assert(t.stype == "ex", "Invalid stype export")
        ctx = self.ctx
        out = self.out
        out:pushInline()
        if t.attr == "local" {
            out:append("local ")
            for i, v in ipairs(t) {
                if i > 1 {
                    out:append(", ")
                }
                self:trExpr(v)
                ctx:localInsert(v.value)
            }
        } elseif t.attr == "export" {
            for i, v in ipairs(t) {
                ctx:globalInsert(v.value)
                out:append(v.value)
                if i < #t {
                    out:append(", ")
                }
            }
            out:append(' = ')
            for i, v in ipairs(t) {
                out:append(v.value .. ' or nil')
                if i < #t {
                    out:append(", ")
                }
            }
        } elseif t.attr == "*" {
            ctx:localInsert("*")
        } else {
            ctx:errorPos("Invalid export attr near " .. (t.attr or "unknown"))
        }
        out:popInline()
    }

    fn trAssign(t) {
        assert(t.stype == '=', "Invalid stype =")
        ctx = self.ctx
        out = self.out
        out:pushInline()
        if t.sub {
            assert(#t[1] == 1 and #t[1] == #t[2], "Invalid assign sub AST")
            --
            e = t[1][1]
            self:trExpr(e)
            out:append(' = ')
            self:trExpr(e)
            out:append(' ' .. t.sub .. ' ')
            --
            e = t[2][1]
            sp, ep = '', ''
            if e.rlop {
                sp, ep = '(', ')'
            }
            out:append(sp)
            self:trExpr(e)
            out:append(ep)
        } else {
            e = t[2]
            for _, v in ipairs(e) {
                ctx:checkName(v)
            }
            e = t[1]
            for i, v in ipairs(e) {
                if t.attr == 'export' {
                    ctx:globalInsert(v.value)
                } elseif t.attr == 'local' or #v <= 0 and not ctx:checkName(v, true) {
                    ctx:localInsert(v.value)
                    if i == 1 {
                        out:append("local ")
                    }
                }
                self:trExpr(v)
                if i < #e {
                    out:append(", ")
                }
            }
            out:append(" = ")
            e = t[2]
            for i, v in ipairs(e) {
                self:trExpr(v)
                if i < #e {
                    out:append(", ")
                }
            }
        }
        out:popInline()
    }

    fn trStFnDef(t) {
        assert(t.stype == "fn", "Invalid stype fn")
        ctx = self.ctx
        out = self.out
        attr = (t.attr == "export" and "" or "local ")
        args = t.args or {}
        fname, pname = self:trEtName(t.name)
        if fname == pname {
            if t.attr == "export" or ctx:checkName(t.name, true) {
                attr = ''
                ctx:globalInsert(fname)
            } else {
                ctx:localInsert(fname)
            }
        } else {
            ctx:checkName(t.name)
        }
        ctx:pushScope("fn", t)
        mark = self:hasColonDot(t.name)
        if mark {
            if mark == ':' {
                ctx:localInsert("self")
            }
            attr = ""
        }
        out:append(attr .. "function " .. fname .. "(" .. Utils.seqReduce(args, "", { init, i, v in
            ctx:localInsert(v.value)
            return init .. (i > 1 and ", " or "") .. v.value
        }) .. ")")
        out:incIndent()
        if #t.body > 0 {
            if t.df {
                out:append(t.df)
            }
            out:changeLine()
            self:trStatement(t.body)
        }
        out:decIndent()
        out:append("end")
        ctx:popScope()
    }

    fn trStCall(t) {
        assert(t.stype == "(", "Invalid stype fn call")
        ctx = self.ctx
        out = self.out
        n = 0
        out:pushInline()
        for i, e in ipairs(t) {
            if i > n {
                self:trExpr(e)
            }
        }
        out:popInline()
    }

    fn trStIfElse(t) {
        assert(t.stype == "if", "Invalid stype if")
        ctx = self.ctx
        out = self.out
        for i, e in ipairs(t) {
            out:append(e.sub .. " ")
            if e.sub != 'else' {
                out:pushInline()
                self:trExpr(e.cond)
                out:popInline()
                out:append(" then", true)
            }
            ctx:pushScope("if", e)
            out:changeLine()
            out:incIndent()
            self:trStatement(e.body)
            out:decIndent()
            ctx:popScope()
        }
        out:append('end')
    }

    fn trStSwitch(t) {
        assert(t.stype == "switch", "Invalid stype switch")
        ctx = self.ctx
        out = self.out
        out:append("local __s = ")
        out:pushInline()
        self:trExpr(t.cond)
        out:popInline()
        out:changeLine()
        for i = 1, #t {
            c = t[i]
            out:pushInline()
            if c.cond {
                if i == 1 {
                    out:append("if ")
                } else {
                    out:append("elseif ")
                }
                sp, ep, count = nil, nil, #c.cond
                for j, e in ipairs(c.cond) {
                    out:append("__s ==")
                    if e.rlop {
                        sp, ep = ' (', (j == count and ')' or ') or ')
                    } else {
                        sp, ep = ' ', (j == count and '' or ' or ')
                    }
                    out:append(sp)
                    self:trExpr(e)
                    out:append(ep)
                }
                out:append(" then")
            } else {
                out:append("else")
            }
            out:changeLine()
            ctx:pushScope("if")
            out:popInline()
            out:incIndent()
            self:trStatement(c.body)
            out:decIndent()
            ctx:popScope()
        }
        out:append("end")
        out:changeLine()
        if t.tail {
            self:trStGotoLabel(t.tail)
            out:changeLine()
        }
    }

    fn trStGuard(t) {
        assert(t.stype == "guard", "Invalid stype guard")
        ctx = self.ctx
        out = self.out
        out:append("if not (")
        out:pushInline()
        self:trExpr(t.cond)
        out:append(") then", true)
        out:popInline()
        out:changeLine()
        out:incIndent()
        ctx:pushScope("gu", t)
        self:trStatement(t.body)
        ctx:popScope()
        out:decIndent()
        out:append("end")
    }

    fn trStFor(t) {
        assert(t.stype == "for" and (t.sub == '=' or t.sub == 'in'), "Invalid stype for")
        ctx = self.ctx
        out = self.out
        out:pushInline()
        out:append("for ")
        ctx:pushScope("lo", t)
        for i, e in ipairs(t.name) {
            ctx:localInsert(e.value)
            if i > 1 {
                out:append(", ")
            }
            self:trExpr(e)
        }
        out:append(' ' .. t.sub .. ' ')
        for i, e in ipairs(t.step) {
            if i > 1 {
                out:append(", ")
            }
            self:trExpr(e)
        }
        out:append(" do")
        out:popInline()
        out:changeLine()
        out:incIndent()
        self:trStatement(t.body)
        out:decIndent()
        out:append("end")
        ctx:popScope()
    }

    fn trStWhile(t) {
        assert(t.stype == "while", "Invalid stype while")
        ctx = self.ctx
        out = self.out
        out:append("while ")
        out:pushInline()
        self:trExpr(t.cond)
        out:append(" do")
        out:popInline()
        out:changeLine()
        out:incIndent()
        ctx:pushScope("lo", t)
        self:trStatement(t.body)
        ctx:popScope()
        out:decIndent()
        out:append("end")
    }

    fn trStRepeat(t) {
        assert(t.stype == "repeat", "Invalid repeat op")
        ctx = self.ctx
        out = self.out
        out:append("repeat")
        out:changeLine()
        out:incIndent()
        ctx:pushScope("lo", t)
        self:trStatement(t.body)
        out:decIndent()
        out:append("until ")
        out:pushInline()
        self:trExpr(t.cond)
        out:popInline()
        ctx:popScope()
    }

    fn trStBreak(t) {
        assert(t.stype == "break", "Invalid stype break")
        ctx = self.ctx
        out = self.out
        out:append("break")
    }

    fn trStGotoLabel(t) {
        assert(t.stype == "goto" or t.stype == "::", "Invalid stype goto")
        ctx = self.ctx
        out = self.out
        if t.stype == "goto" {
            out:append("goto " .. t[1].value)
        } else {
            out:append("::" .. t[1].value .. "::")
        }
    }

    fn trStReturn(t) {
        assert(t.stype == "return", "Invalid stpye return")
        ctx = self.ctx
        out = self.out
        out:append("return ")
        out:pushInline()
        for i, e in ipairs(t) {
            if i > 1 {
                out:append(", ")
            }
            self:trExpr(e)
        }
        out:popInline()
    }

    fn trStDefer(t) {
        assert(t.stype == "defer", "Invalid stype defer")
        ctx = self.ctx
        out = self.out
        out:append("__df[#__df+1] = function()")
        out:changeLine()
        out:incIndent()
        ctx:pushScope("df")
        self:trStatement(t.body)
        ctx:popScope()
        out:decIndent()
        out:append("end")
    }

    fn trStDo(t) {
        assert(t.stype == "do", "Invalid stype do end")
        ctx = self.ctx
        out = self.out
        out:append("do")
        out:changeLine()
        out:incIndent()
        ctx:pushScope("do")
        self:trStatement(t.body)
        ctx:popScope()
        out:decIndent()
        out:append("end")
    }

    fn trStClass(t) {
        assert(t.stype == "class", "Invalid stype class")
        ctx = self.ctx
        out = self.out
        attr = (t.attr == "export") and "" or "local "
        clsname = t.name.value
        supertype = t.super and t.super.value
        if t.attr == "export" or ctx:checkName(t.name, true) {
            attr = ''
            ctx:globalInsert(clsname)
        } else {
            ctx:localInsert(clsname)
        }
        if supertype {
            ctx:checkName(t.super)
        }
        ctx:updatePos(t.name.pos)
        out:append(attr .. clsname .. " = { __tn = '" .. clsname .. "', __tk = 'class', __st = " .. (supertype or "nil") .. " }")
        out:append("do")
        out:changeLine()
        out:incIndent()
        out:append("local __st = " .. (supertype or "nil"))
        out:append("local __ct = " .. clsname)
        out:append("__ct.__ct = __ct")
        if supertype {
            out:append("assert(type(__st) == 'table' and __st.__ct == __st and __st.__tk == 'class', 'invalid super type')")
        } else {
            out:append("__ct.isKindOf = function(c, a) return a and c and ((c.__ct == a) or (c.__st and c.__st:isKindOf(a))) or false end")
        }
        --
        ctx:pushScope("cl")
        cls_fns, ins_fns = {}, {}
        fn_deinit = self:hlVarAndFns(t, "class", "__ct", ctx, out, cls_fns, ins_fns)
        --
        out:append("local __imt = {")
        out:incIndent()
        if not ins_fns.has_tostring {
            out:append([[__tostring = function(t) return "<class ]] .. clsname .. [[" .. t.__ins_name .. ">" end,]])
        }
        out:append("__index = function(t, k)")
        out:incIndent()
        if ins_fns.has_index {
            out:append("local ok, v = __ct.__ins_index(t, k)")
            out:append("if ok then return v else v = __ct[k] end")
        } else {
            out:append("local v = __ct[k]")
        }
        out:append("if v ~= nil then rawset(t, k, v) end")
        out:append("return v")
        out:decIndent()
        out:append("end,")
        if fn_deinit {
            out:append("__gc = function(t) t:deinit() end,")
        }
        for _, e in ipairs(ins_fns) {
            out:append(e.name.value .. " = function(")
            self:hlFnArgsBody(e, false, true)
        }
        out:decIndent()
        out:append("}")
        --
        out:append("setmetatable(__ct, {")
        out:incIndent()
        if not cls_fns.has_tostring {
            out:append('__tostring = function() return "<class ' .. clsname .. '>" end,')
        }
        out:append('__index = function(t, k)')
        out:incIndent()
        if cls_fns.has_index {
            out:append('local ok, v = t.__cls_index(t, k)')
            out:append('if ok then return v else v = __st and __st[k] end')
        } else {
            out:append('local v = __st and __st[k]')
        }
        out:append('if v ~= nil then rawset(t, k, v) end')
        out:append('return v')
        out:decIndent()
        out:append('end,')
        out:append("__call = function(_, ...)")
        out:incIndent()
        out:append("local t = {}; t.__ins_name = tostring(t):sub(6)")
        out:append("local ins = setmetatable(t, __imt)")
        out:append("if type(rawget(__ct,'init')) == 'function' and __ct.init(ins, ...) == false then return nil end")
        if fn_deinit {
            out:append('if _VERSION == "Lua 5.1" then')
            out:incIndent()
            out:append("rawset(ins, '__gc_proxy', newproxy(true))")
            out:append("getmetatable(ins.__gc_proxy).__gc = function() ins:deinit() end")
            out:decIndent()
            out:append("end")
        }
        out:append("return ins")
        out:decIndent()
        out:append("end,")
        for _, e in ipairs(cls_fns) {
            out:append(e.name.value .. " = function(")
            self:hlFnArgsBody(e, false, true)
        }
        out:decIndent()
        out:append("})")
        --
        out:decIndent()
        out:append("end")
        ctx:popScope()
    }

    fn trStStruct(t) {
        assert(t.stype == "struct", "Invalid stype struct")
        ctx = self.ctx
        out = self.out
        attr = (t.attr == "export") and "" or "local "
        strname = t.name.value
        if t.attr == "export" or ctx:checkName(t.name, true) {
            attr = ''
            ctx:globalInsert(strname)
        } else {
            ctx:localInsert(strname)
        }
        ctx:updatePos(t.name.pos)
        out:append(attr .. strname .. " = { __tn = '" .. strname .. "', __tk = 'struct' }")
        out:append("do")
        out:changeLine()
        out:incIndent()
        out:append("local __ct = " .. strname)
        out:append("__ct.__ct = __ct")
        --
        ctx:pushScope("cl")
        cls_fns, ins_fns = {}, {}
        fn_deinit = self:hlVarAndFns(t, "struct", "__ct", ctx, out, cls_fns, ins_fns)
        --
        out:append("local __imt = {")
        out:incIndent()
        if not ins_fns.has_tostring {
            out:append([[__tostring = function(t) return "<struct ]] .. strname .. [[" .. t.__ins_name .. ">" end,]])
        }
        out:append("__index = function(t, k)")
        out:incIndent()
        out:append("local v = rawget(__ct, k)")
        out:append("if v ~= nil then rawset(t, k, v) end")
        out:append("return v")
        out:decIndent()
        out:append("end,")
        out:append("__newindex = function(t, k, v) if rawget(__ct, k) ~= nil then rawset(t, k, v) end end,")
        if fn_deinit {
            out:append("__gc = function(t) t:deinit() end,")
        }
        for _, e in ipairs(ins_fns) {
            out:append(e.name.value .. " = function(")
            self:hlFnArgsBody(e, false, true)
        }
        out:decIndent()
        out:append("}")
        --
        out:append(strname .. " = setmetatable({}, {")
        out:incIndent()
        if not cls_fns.has_tostring {
            out:append('__tostring = function() return "<struct ' .. strname .. '>" end,')
        }
        out:append('__index = function(t, k) local v = rawget(__ct, k); if v ~= nil then rawset(t, k, v); end return v end,')
        out:append('__newindex = function(t, k, v) if v ~= nil and rawget(__ct, k) ~= nil then rawset(t, k, v) end end,')
        out:append("__call = function(_, ...)")
        out:incIndent()
        out:append("local t = {}; t.__ins_name = tostring(t):sub(6)")
        out:append("local ins = setmetatable(t, __imt)")
        out:append("if type(rawget(__ct,'init')) == 'function' and __ct.init(ins, ...) == false then return nil end")
        if fn_deinit {
            out:append('if _VERSION == "Lua 5.1" then')
            out:incIndent()
            out:append("rawset(ins, '__gc_proxy', newproxy(true))")
            out:append("getmetatable(ins.__gc_proxy).__gc = function() ins:deinit() end")
            out:decIndent()
            out:append("end")
        }
        out:append("return ins")
        out:decIndent()
        out:append("end,")
        for _, e in ipairs(cls_fns) {
            out:append(e.name.value .. " = function(")
            self:hlFnArgsBody(e, false, true)
        }
        out:decIndent()
        out:append("})")
        --
        out:decIndent()
        out:append("end")
        ctx:popScope()
    }

    fn trStExtension(t) {
        assert(t.stype == "extension", "Invalid stype extension")
        ctx = self.ctx
        out = self.out
        clsname = t.name.value
        extype = t.super and t.super.value
        ctx:checkName(t.name)
        if extype {
            ctx:checkName(t.super)
        }
        ctx:updatePos(t.name.pos)
        out:append("do")
        out:changeLine()
        out:incIndent()
        out:append("local __et = " .. (extype or "nil"))
        out:append("local __ct = " .. clsname)
        out:append("assert(type(__ct) == 'table' and type(__ct.__ct) == 'table' and (__ct.__tk == 'class' or __ct.__tk == 'struct'), 'invalid extended type')")
        out:append("__ct = __ct.__ct")
        if extype {
            -- extype can be class or struct
            out:append("assert(type(__et) == 'table' and type(__et.__ct) == 'table' and (__et.__tk == 'class' or __et.__tk == 'struct'), 'invalid super type')")
            out:append('for k, v in pairs(__et.__ct) do')
            out:incIndent()
            out:append('if __ct[k] == nil and (k:len() < 2 or (k:sub(1, 2) ~= "__" and k ~= "isKindOf" and k ~= "init" and k ~= "deinit")) then')
            out:incIndent()
            out:append('__ct[k] = v')
            out:decIndent()
            out:append("end")
            out:decIndent()
            out:append("end")
        }
        --
        ctx:pushScope("cl")
        self:hlVarAndFns(t, "extension", "__ct", ctx, out, {}, {})
        out:decIndent()
        out:append("end")
        ctx:popScope()
    }

    fn hlVarAndFns(t, cname, sname, ctx, out, cls_fns, ins_fns) {
        out:append("-- declare " .. cname .. " var and methods")
        out:changeLine()
        fn_deinit = false
        for _, s in ipairs(t) {
            stype = s.stype
            if stype == "=" {
                out:append(sname .. ".")
                out:pushInline()
                self:trExpr(s[1])
                out:append(' = ')
                self:trExpr(s[2])
                out:popInline()
                out:changeLine()
            } elseif stype == "fn" {
                fn_name = s.name.value
                if cname == "extension" and (fn_name == "init" or fn_name == "deinit") {
                    ctx:errorPos("extension not support init/deinit", s.name.pos)
                } elseif fn_name == "deinit" {
                    fn_deinit = true
                }
                fn_ins = s.attr ~= "static"
                if _cls_metafns[fn_name] {
                    if cname == "extension" {
                        ctx:errorPos("extension not support metamethod", s.name.pos)
                    } elseif fn_ins {
                        ins_fns[#ins_fns + 1] = s
                        if fn_name == "__tostring" {
                            ins_fns.has_tostring = true
                        } elseif fn_name == "__index" or fn_name == "__newindex" {
                            if cname == "struct" {
                                ctx:errorPos("struct not support " .. fn_name, s.name.pos)
                            } elseif fn_name == "__index" {
                                ins_fns[#ins_fns] = nil -- clear last ins_fns
                                ins_fns.has_index = true
                                s.name.value = "__ins_index"
                                out:append("function " .. sname .. "." .. s.name.value .. "(")
                                self:hlFnArgsBody(s, false)
                            }
                        }
                    } else {
                        cls_fns[#cls_fns + 1] = s
                        if fn_name == "__tostring" {
                            cls_fns.has_tostring = true
                        } elseif fn_name == "__index" or fn_name == "__newindex" {
                            if cname == "struct" {
                                ctx:errorPos("struct not support " .. fn_name, s.name.pos)
                            } elseif fn_name == "__index" {
                                cls_fns[#cls_fns] = nil -- clear last cls_fns
                                cls_fns.has_index = true
                                s.name.value = "__cls_index"
                                out:append("function " .. sname .. "." .. s.name.value .. "(")
                                self:hlFnArgsBody(s, false)
                            }
                        } elseif fn_name == "__call" {
                            ctx:errorPos(cname .. " not support static " .. fn_name, s.name.pos)
                        }
                    }
                } else {
                    out:append("function " .. sname .. (fn_ins and ":" or ".") .. fn_name .. "(")
                    self:hlFnArgsBody(s, fn_ins)
                }
            }
        }
        out:append("-- declare end")
        return fn_deinit
    }

    fn hlFnArgsBody(e, fn_ins, comma_end) {
        ctx = self.ctx
        out = self.out
        out:pushInline()
        ctx:pushScope("fn", e)
        for i, v in ipairs(e.args) {
            if i > 1 {
                out:append(", ")
            }
            self:trExpr(v)
            ctx:localInsert(v.value)
        }
        if fn_ins {
            ctx:localInsert("self")
        }
        out:append(")")
        out:popInline()
        out:incIndent()
        if #e.body > 0 {
            if e.df {
                out:append(e.df)
            }
            out:changeLine()
            self:trStatement(e.body)
        }
        out:decIndent()
        out:append("end" .. (comma_end and "," or ""))
        out:changeLine()
        ctx:popScope()
    }

    fn hasColonDot(expr) {
        if type(expr) == 'table' {
            if expr.etype == 'exp' {
                count = #expr
                for i = count, 1, -1 {
                    v = expr[i]
                    if v.etype == ':' or v.etype == '.' {
                        return v.etype
                    }
                }
            }
            return (expr.etype == ':' or expr.etype == '.') and expr.etype
        }
        return false
    }
}

--[[
    config = {
        fname = "filename",
        shebang = false,
        fi_scope = {},
    }
    data = {
        content = CONTENT,
        ast = AST_TREE
    }
]]
fn compile(config, data) {
    guard type(data) == "table" and data.ast and data.content else {
        return false, { err_msg = "Invalid data", pos = 0 }
    }

    Ctx:reset(config, data.ast, data.content)
    Out:reset()
    M:reset(Ctx, Out)

    ret, emsg = pcall(M.trStatement, M, Ctx.ast)
    guard ret else {
        return false, (Ctx.err_info or { err_msg = emsg, pos = 0 })
    }

    return true, table.concat(Out._output, "\n")
}

-- clear proj exports
fn clearproj() {
    _scope_proj.vars = {}
}

return { =compile, =clearproj }
